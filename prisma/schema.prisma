
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Item {
    id          String      @id @default(cuid())
    name        String
    slug String @unique
    description String?
    price       Float?

    minimumQuantity Int
    maximumQuantity Int?
    circulation Int

    conditionalFields Json?

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    deletedAt   DateTime?

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    categoryId String
    category   Category @relation(fields: [categoryId], references: [id])

    status Int @default(1)

    @@index([name])
    @@index([deletedAt])
    @@index([slug])
}

model Category {
    id          String      @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    deletedAt   DateTime?

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    items Item[]

    @@index([name])
    @@index([deletedAt])
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    role Int       @default(1)
    accounts      Account[]
    sessions      Session[]
    items         Item[]
    categories Category[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
