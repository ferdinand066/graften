
generator client {
    provider = "prisma-client-js"
}

datasource db {
    // provider = "mysql"
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL") // used at runtime
}

model Item {
    id          String      @id @default(cuid())
    name        String
    slug String @unique
    description String?
    price       Float?

    minimumQuantity Int
    maximumQuantity Int?
    circulation Int

    conditionalFields Json?

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    deletedAt   DateTime?

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    categoryId String
    category   Category @relation(fields: [categoryId], references: [id])

    status Int @default(1)

    carts CartItem[]
    orders OrderItem[]

    @@index([name])
    @@index([deletedAt])
    @@index([slug])
}

model Category {
    id          String      @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    deletedAt   DateTime?

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    items Item[]

    @@index([name])
    @@index([deletedAt])
}

model CartItem {
    id          String      @id @default(cuid())

    quantity Int @default(1)
    selectedConditionalFields Json?

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId String

    // Indexes for better query performance
    @@index([createdById])
    @@index([itemId])
    @@index([createdAt])
}

model Order {
    id          String      @id @default(cuid())

    invoiceNumber String @unique
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    status Int @default(1)

    grandTotal Float

    orderItems OrderItem[]

    // Indexes for better query performance
    @@index([createdById])
    @@index([status])
    @@index([createdAt])
    @@index([updatedAt])
    @@index([grandTotal])
    @@index([invoiceNumber]) // Already unique, but explicit index for faster lookups
    // Composite indexes for common query patterns
    @@index([createdById, status])
    @@index([createdById, createdAt])
    @@index([status, createdAt])
    @@index([createdById, grandTotal])
    @@index([status, grandTotal])
    @@index([createdAt, grandTotal])
}

model OrderItem {
    id          String      @id @default(cuid())

    name String

    quantity Int @default(1)
    selectedConditionalFields Json?
    totalPrice Float

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId String

    createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId String

    // Indexes for better query performance
    @@index([orderId])
    @@index([itemId])
    @@index([createdById])
    @@index([createdAt])
    @@index([updatedAt])
    @@index([totalPrice])
    // Composite indexes for common query patterns
    @@index([orderId, itemId])
    @@index([orderId, createdAt])
    @@index([createdById, createdAt])
    @@index([itemId, createdAt])
    @@index([createdById, orderId])
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    role Int       @default(1)
    accounts      Account[]
    sessions      Session[]
    items         Item[]
    categories Category[]
    carts CartItem[]

    orders Order[]
    orderItems OrderItem[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
